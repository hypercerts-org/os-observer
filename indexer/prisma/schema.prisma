generator client {
  provider = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id          Int                     @id @default(autoincrement())
  createdAt   DateTime                @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime                @updatedAt
  name        String
  description String?
  verified    Boolean                 @default(false)
  slug        String                  @unique
  projects    CollectionsOnProjects[]
}

model CollectionsOnProjects {
  assignedAt   DateTime   @default(now()) @db.Timestamptz(3)
  collectionId Int
  projectId    Int
  collection   Collection @relation(fields: [collectionId], references: [id])
  project      Project    @relation(fields: [projectId], references: [id])

  @@id([collectionId, projectId])
}

model Project {
  id          Int                     @id @default(autoincrement())
  createdAt   DateTime                @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime                @updatedAt
  name        String
  description String?
  verified    Boolean                 @default(false)
  slug        String                  @unique
  collections CollectionsOnProjects[]
  artifacts   ProjectsOnArtifacts[]
}

model ProjectsOnArtifacts {
  assignedAt DateTime @default(now()) @db.Timestamptz(3)
  projectId  Int
  artifactId Int
  artifact   Artifact @relation(fields: [artifactId], references: [id])
  project    Project  @relation(fields: [projectId], references: [id])

  @@id([projectId, artifactId])
}

model Artifact {
  id              Int                   @id @default(autoincrement())
  createdAt       DateTime              @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime              @updatedAt
  type            ArtifactType
  namespace       ArtifactNamespace
  name            String
  url             String?
  details         Json?

  events          Event[]
  eventPtrs       EventPointer[]

  eventToArtifact   EventTs[] @relation("EventToArtifact")
  eventFromArtifact EventTs[] @relation("EventFromArtifact")
  projects        ProjectsOnArtifacts[]
  rangedEventPtrs RangedEventPointer[]

  @@unique([namespace, name])
}

model Contributor {
  id        Int                               @id @default(autoincrement())
  createdAt DateTime                          @default(now()) @db.Timestamptz(3)
  updatedAt DateTime                          @updatedAt
  name      String
  namespace ContributorNamespace
  details   Json?
  groups    ContributorGroupsOnContributors[]
  events    Event[]

  @@unique([name, namespace])
}

model ContributorGroup {
  id           Int                               @id @default(autoincrement())
  createdAt    DateTime                          @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime                          @updatedAt
  name         String
  contributors ContributorGroupsOnContributors[]
}

model ContributorGroupsOnContributors {
  id            Int              @id @default(autoincrement())
  contributorId Int
  groupId       Int
  contributor   Contributor      @relation(fields: [contributorId], references: [id])
  group         ContributorGroup @relation(fields: [groupId], references: [id])
}

model Event {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime     @updatedAt
  artifactId    Int
  eventType     EventType
  eventTime     DateTime     @db.Timestamptz(3)
  contributorId Int?
  amount        Float
  details       Json?
  artifact      Artifact     @relation(fields: [artifactId], references: [id])
  contributor   Contributor? @relation(fields: [contributorId], references: [id])

  @@index([eventTime])
  @@index([artifactId, eventType, eventTime])
}

model EventTs {
  id            Int          @default(autoincrement())
  createdAt     DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime     @updatedAt
  type          EventType
  time          DateTime     @db.Timestamptz(3)
  toArtifactId    Int
  fromArtifactId  Int?
  amount        Float
  toArtifact    Artifact     @relation("EventToArtifact", fields: [toArtifactId], references: [id])
  fromArtifact  Artifact?    @relation("EventFromArtifact", fields: [fromArtifactId], references: [id])

  @@unique([id, time])
}

model EventPointer {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime  @updatedAt
  artifactId Int
  eventType  EventType
  pointer    Json
  autocrawl  Boolean?
  artifact   Artifact  @relation(fields: [artifactId], references: [id])

  @@unique([artifactId, eventType])
}

model RangedEventPointer {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime @updatedAt
  artifactId Int
  collector  String
  pointer    Json
  startDate  DateTime
  endDate    DateTime
  version    Int
  artifact   Artifact @relation(fields: [artifactId], references: [id])

  @@unique([artifactId, collector, startDate, endDate])
}

model Job {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now()) @db.Timestamptz(3)
  execGroup     String
  scheduledTime DateTime
  collector     String
  status        JobStatus
  executions    JobExecution[]
}

model JobExecution {
  id        Int                @id @default(autoincrement())
  createdAt DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt DateTime           @updatedAt
  status    JobExecutionStatus
  details   Json?
  jobId     Int
  job       Job                @relation(fields: [jobId], references: [id])
  Log       Log[]
}

model Log {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now()) @db.Timestamptz(3)
  executionId Int
  level       String
  body        Json
  execution   JobExecution @relation(fields: [executionId], references: [id])
}

enum EventType {
  FUNDING
  PULL_REQUEST_CREATED
  PULL_REQUEST_MERGED
  COMMIT_CODE
  ISSUE_FILED
  ISSUE_CLOSED
  DOWNSTREAM_DEPENDENCY_COUNT
  UPSTREAM_DEPENDENCY_COUNT
  DOWNLOADS
  CONTRACT_INVOKED
  USERS_INTERACTED
  CONTRACT_INVOKED_AGGREGATE_STATS
  PULL_REQUEST_CLOSED
  STAR_AGGREGATE_STATS
  PULL_REQUEST_REOPENED
  PULL_REQUEST_REMOVED_FROM_PROJECT
  PULL_REQUEST_APPROVED
  ISSUE_CREATED
  ISSUE_REOPENED
  ISSUE_REMOVED_FROM_PROJECT
  STARRED
  FORK_AGGREGATE_STATS
  FORKED
  WATCHER_AGGREGATE_STATS
}

enum ArtifactType {
  EOA_ADDRESS
  SAFE_ADDRESS
  CONTRACT_ADDRESS
  GIT_REPOSITORY
  NPM_PACKAGE
  FACTORY_ADDRESS
}

enum ArtifactNamespace {
  ETHEREUM
  OPTIMISM
  GOERLI
  GITHUB
  GITLAB
  NPM_REGISTRY
}

enum ContributorNamespace {
  GITHUB_USER
  EOA_ADDRESS
  GIT_EMAIL
  GIT_NAME
  GITHUB_ORG
  CONTRACT_ADDRESS
  SAFE_ADDRESS
}

enum JobStatus {
  PENDING
  COMPLETE
}

enum JobExecutionStatus {
  ACTIVE
  COMPLETE
  FAILED
}
