# THIS IS A TEMPORARY CRON'D WORKER TO AUTOMATICALLY RUN GITHUB JOBS. EVENTUALLY
# THESE SHOULD BE SPAWNED INSIDE THE SCHEDULER FROM WITHIN NODE

# Execute the worker for a specific group
name: os-observer-indexer-worker-dune
env:
  DB_HOST: ${{ vars.DB_HOST }}
  DB_PORT: ${{ vars.DB_PORT }}
  DB_USER: ${{ vars.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_DATABASE: ${{ vars.DB_DATABASE }}
  X_GITHUB_GRAPHQL_API: ${{ vars.X_GITHUB_GRAPHQL_API }}
  X_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DUNE_API_KEY: ${{ secrets.DUNE_API_KEY }}
  CACHE_DIR: /tmp/oso/cache
  RUN_DIR: /tmp/oso/run
  LOG_FILE: /tmp/oso/log/run.log

# Trigger the workflow when:
on:
  workflow_dispatch:
  # Allows you to run this workflow manually from the Actions tab
  schedule:
    # Schedule every 15 minutes
    - cron: '*/15 * * * *'

jobs:
  collector-worker-call-dune:
    name: collector-worker-run-dune
    environment: indexer
    runs-on: ubuntu-latest
    permissions:
      packages: write

    services:
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Run worker
        uses: ./.github/workflows/indexer-worker
        with:
          group: dune
          github_actor: ${{ github.actor }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
        